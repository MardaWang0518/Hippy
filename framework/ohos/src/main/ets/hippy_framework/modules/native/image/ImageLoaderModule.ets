/*
 * Tencent is pleased to support the open source community by making
 * Hippy available.
 *
 * Copyright (C) 2022 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { HippyNativeModule } from '../../../../support/annotation/HippyNativeModule'
import { HippyAny, HippyModuleCallback } from '../../../../support/common/HippyTypes'

import { VfsManager } from '../../../../vfs/VfsManager'
import { HippyEngineContext } from '../../../HippyEngineContext'
import { HippyNativeModuleBase } from '../HippyNativeModuleBase'
import { HashMap } from '@kit.ArkTS'
import { ResourceDataHolder } from '../../../../vfs/ResourceDataHolder'
import { image } from '@kit.ImageKit'
import { LogUtils } from '../../../../support/utils/LogUtils'
import { FetchResourceCallback } from '../../../../vfs/FetchResourceCallback'
import { HippyJsException } from '../../../common/HippyJsException'


const IMAGE_MODULE_TAG = "ImageLoaderModule"

@HippyNativeModule({ name: "ImageLoaderModule" })
export class ImageLoaderModule extends HippyNativeModuleBase {
  public static readonly NAME = 'ImageLoaderModule'
  private static ERROR_KEY_MESSAGE = "message";
  private mVfsManager: VfsManager;

  constructor(ctx: HippyEngineContext) {
    super(ctx)
    this.mVfsManager = ctx.getVfsManager();
  }

  public fetchCompleted(dataHolder: ResourceDataHolder, url: string) {
    return new Promise<Map<string, string>>((resolve, reject) => {
      let buffer = dataHolder.getBuffer();
      if (dataHolder.resultCode != ResourceDataHolder.RESOURCE_LOAD_SUCCESS_CODE || buffer == null) {
        let message =
          dataHolder.errorMessage != null ? dataHolder.errorMessage : "";
        let errorMsg = "Fetch image failed, url=" + url + ", msg=" + message;
        let map = new Map<string, string>()
        map.set(ImageLoaderModule.ERROR_KEY_MESSAGE, errorMsg)
        reject(map);
      } else {
        this.decodeImageData(url, buffer);
      }
      dataHolder.recycle();
    })
  }

  public call(method: string, params: Array<HippyAny>, callback: HippyModuleCallback): HippyAny {
    switch (method) {
      case 'getSize': {
        this.getSize(params)
        break;
      }
      case 'prefetch': {
        this.prefetch(params)
        break;
      }
      default:
        super.call(method, params, callback)
    }
    return null;
  }

  private decodeImageData(url: string, data: ArrayBuffer): Promise<Map<string, string>> {
    return new Promise<Map<string, string>>((resolve, reject) => {
      if (data && data.byteLength > 0) {
        let imageSourceApi: image.ImageSource = image.CreateIncrementalSource(data);
        imageSourceApi.getImageInfo((err: HippyJsException, imageInfo: image.ImageInfo) => {
          if (err != undefined) {
            let map = new Map<string, string>()
            map.set("width", "Fetch image failed, url=" + url + ", msg=" + err.message)
            LogUtils.e(IMAGE_MODULE_TAG, `Failed to obtaining the image information. message is ${err.message}`);
          } else {
            let map = new Map<string, string>()
            map.set("width", imageInfo.size.width + "")
            map.set("height", imageInfo.size.height + "")
            LogUtils.i(IMAGE_MODULE_TAG, 'Succeeded in obtaining the image information.');
          }
        })
      }
    })
  }

  private generateRequestParams(): HashMap<string, string> {
    let requestParams = new HashMap<string, string>();
    requestParams.set("Content-Type", "image");
    return requestParams;
  }

  private getSize(urls: Array<HippyAny>): Promise<Map<string, string>> {
    return new Promise<Map<string, string>>((resolve, reject) => {
      if (urls == null || urls.length <= 0) {
        let map = new Map<string, string>()
        map.set("width", "Url parameter is empty!")
        reject(map);
        return;
      }
      let resCallback = new FetchResourceCallbackImpl()
      for (let i = 0; i < urls.length; i++) {
        resCallback.onFetchCompleted = (holder: ResourceDataHolder) => {
          this.fetchCompleted(holder, urls[i] as string)
        }
        resCallback.onFetchProgress = (total: number, loaded: number) => {
          // Nothing need to do here.
        }
        this.mVfsManager.fetchResourceAsync(urls[i] as string, null, this.generateRequestParams(), resCallback)
      }
    })
  }

  private prefetch(urls: Array<HippyAny>) {
    let resCallback = new FetchResourceCallbackImpl()
    for (let i = 0; i < urls.length; i++) {
      resCallback.onFetchCompleted = (holder: ResourceDataHolder) => {
        holder.recycle()
      }
      resCallback.onFetchProgress = (total: number, loaded: number) => {
        // Nothing need to do here.
      }
      this.mVfsManager.fetchResourceAsync(urls[i] as string, null, this.generateRequestParams(), resCallback)
    }
  }
}

class FetchResourceCallbackImpl implements FetchResourceCallback {
  onFetchCompleted = (holder: ResourceDataHolder) => {
  };
  onFetchProgress = (total: number, loaded: number) => {
  };
}
